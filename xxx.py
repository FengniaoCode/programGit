# -*- coding:utf-8 -*-
"""
----------------------------------------------------------
作者: 武广辉
日期: 2022/2/19 12:47
----------------------------------------------------------
当前项目的名称: programGit
在文件创建过程中在“新建文件”对话框中指定的新文件的名称: xxx.py
当前集成开发环境: PyCharm
----------------------------------------------------------
"""


# 自己写一个Person类
class Person(object):

    # 在类中__init__()函数叫构造函数，又叫构造方法，也可以叫初始化函数。
    # 它的作用就是初始化实例时，初始化传入实例的的默认值。如果不写__init__(),就会调用的默认为空的__init__(),
    # 说白了，这个方法不管你写不写，都会调用，而且，一旦实例化就会调用.
    def __init__(self, name1):
        # 这里self就是指实例，self.name就是Doo类的属性变量，是Doo类所有。而name1是外部传来的参数，不是Student类所自带的。
        # 故，self.name = name1的意思就是把外部传来的参数name1的值赋值给Student类自己的属性变量self.name。
        # 其实 self 简单的说就是把 class 中定义的变量和函数变成实例变量和实例函数，作为类 class 的成员，使得成员间能互相调用，而不需要从外部调用 数据（即变量）和 方法（即 函数），以实现数据的封装。
        self.name = name1  # 给实例化的类传参数， 为实例变量self 绑定 name 属性，类似于 赋值 操作
        print(self.name)

    def __str__(self):  # 在类里面定义一个__str__方法，print打印出来的是return返回的内容, #self 这个关键字相当于实例化对象本身，在实例化过程中，把自己传进去了

        return self.name        # 当前对象封装的值是什么，就返回什么


obj = Person("it部门")  # obj = Doo():实例化这个类,最后得到这个类的实例化对象obj，name1=“it部门”
print(obj)


